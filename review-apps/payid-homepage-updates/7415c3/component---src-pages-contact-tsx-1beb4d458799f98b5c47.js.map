{"version":3,"sources":["webpack:///./src/pages/contact.tsx","webpack:///./src/assets/common/selectArrow.svg","webpack:///./src/components/common/input-field.tsx"],"names":["Contact","useState","validForm","setValidForm","role","setRole","firstName","setFirstName","lastName","setLastName","email","setEmail","message","setMessage","submitted","setSubmitted","emailRegex","isValidEmail","val","test","useEffect","length","path","title","description","className","style","minHeight","onSubmit","event","preventDefault","formData","undefined","window","heap","track","gtag","send_to","encodedFormData","encodeFormData","fetch","mode","method","body","headers","catch","err","Sentry","captureException","scrollTo","classNames","defaultValue","id","name","onChange","target","value","label","map","r","key","hidden","htmlFor","type","autoComplete","required","requiredText","e","currentTarget","validate","invalidText","disabled","size","React","SelectArrow","props","createElement","defaultProps","module","exports","default","InputField","theme","inputProps","inputRef","useRef","isRaised","setIsRaised","error","setError","shouldRaise","current","document","activeElement","hasErrors","onFocus","onBlur","ref"],"mappings":"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","file":"component---src-pages-contact-tsx-1beb4d458799f98b5c47.js","sourcesContent":["import classNames from 'classnames'\nimport React, { useState, useEffect } from 'react'\n\nimport SelectArrow from '../assets/common/selectArrow.svg'\nimport Button from '../components/common/button'\nimport InputField from '../components/common/input-field'\nimport Layout from '../components/layout'\nimport { encodeFormData } from '../utils/config'\n\nconst Contact: React.FC = () => {\n  const minHeight = {\n    minHeight: 'calc(100vh - 9.25rem)',\n  }\n  const [validForm, setValidForm] = useState<boolean>(false)\n  const [role, setRole] = useState<string>('DEFAULT')\n  const [firstName, setFirstName] = useState<string>()\n  const [lastName, setLastName] = useState<string>()\n  const [email, setEmail] = useState<string>()\n  const [message, setMessage] = useState<string>()\n  const [submitted, setSubmitted] = useState<boolean>(false)\n\n  const roles = [\n    {\n      label: 'Role',\n      value: 'DEFAULT',\n    },\n    {\n      label: 'Project Manager',\n      value: 'PM',\n    },\n    {\n      label: 'Developer',\n      value: 'Engineer',\n    },\n    {\n      label: 'Business Development',\n      value: 'BD',\n    },\n    {\n      label: 'Sales',\n      value: 'Sales',\n    },\n    {\n      label: 'Operations',\n      value: 'Operations',\n    },\n    {\n      label: 'Executive',\n      value: 'Executive',\n    },\n    {\n      label: 'Marketing',\n      value: 'Marketing',\n    },\n  ]\n\n  const emailRegex = /^[a-zA-Z0-9.!#$%&â€™*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/\n  const isValidEmail = (val: string | undefined): boolean => {\n    return !!(val && emailRegex.test(val))\n  }\n\n  useEffect(() => {\n    if (\n      role &&\n      role !== 'DEFAULT' &&\n      firstName &&\n      firstName.length > 0 &&\n      email &&\n      isValidEmail(email) &&\n      message &&\n      message.length > 0\n    ) {\n      setValidForm(true)\n    } else {\n      setValidForm(false)\n    }\n  }, [role, firstName, email, message])\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>): void => {\n    event.preventDefault()\n    if (!validForm) return\n\n    const formData = {\n      role,\n      'first-name': firstName,\n      'last-name': lastName !== '' ? lastName : undefined,\n      email,\n      message,\n    }\n\n    if (typeof window !== 'undefined') {\n      if (typeof window.heap !== 'undefined') {\n        window.heap.track('contact', formData)\n      }\n      if (typeof window.gtag !== 'undefined') {\n        window.gtag('event', 'conversion', {\n          send_to: 'AW-877332159/jdvuCLLdpdQBEL-NrKID',\n        })\n        window.gtag('event', 'conversion', {\n          send_to: 'AW-616173950/7ehtCOKFvNYBEP6i6KUC',\n        })\n      }\n    }\n\n    const encodedFormData = encodeFormData(formData)\n\n    fetch('https://go.ripple.com/l/105572/2020-06-15/csn2lj', {\n      mode: 'no-cors',\n      method: 'POST',\n      body: encodedFormData,\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n      },\n    }).catch((err) => {\n      Sentry.captureException(err)\n    })\n\n    fetch(\n      `https://script.google.com/macros/s/AKfycbyT7zjGQMQKaSrE9ef1NuvAFGKGUc8cnnUGSFo7V5Q6HWeBx-DL/exec?${encodedFormData}`,\n      {\n        mode: 'no-cors',\n      },\n    ).catch(() => {})\n\n    setSubmitted(true)\n    if (typeof window !== 'undefined') window.scrollTo(0, 0)\n  }\n\n  return (\n    <Layout\n      path=\"contact\"\n      title=\"Contact the PayID Team\"\n      description=\"Have a question about PayID? Contact us and we will help you find the information you are looking for.\"\n    >\n      <div\n        className=\"text-white bg-blue-dark-900 faq-bg xl:bg-cover\"\n        style={minHeight}\n      >\n        <div className=\"flex justify-center px-6 lg:px-18\">\n          <div className=\"container lg:px-17 lg:mt-0 mt-18\">\n            <div className=\"max-w-4xl pt-16 lg:pt-70\">\n              <h1 className=\"text-3xl font-bold sm:text-h1 sm:leading-tighter\">\n                Start building the future of open payments\n              </h1>\n            </div>\n\n            {!submitted && (\n              <div className=\"w-full mx-auto mt-20 md:mt-40 md:max-w-md\">\n                <h2 className=\"mb-10 text-2xl font-bold sm:text-4xl sm:mb-14\">\n                  Have questions? Our team is here to help you get started.\n                </h2>\n\n                <form\n                  onSubmit={handleSubmit}\n                  className=\"mt-16 mb-20 md:mt-30 md:mb-40\"\n                >\n                  <div\n                    className={classNames(\n                      'relative px-6 mb-6 border-2 rounded',\n                      {\n                        'border-green-600': role !== 'DEFAULT',\n                        'border-white': role === 'DEFAULT',\n                      },\n                    )}\n                  >\n                    <select\n                      defaultValue=\"DEFAULT\"\n                      id=\"role\"\n                      name=\"role\"\n                      onChange={(event) => setRole(event.target.value)}\n                      className=\"w-full py-4 bg-transparent appearance-none focus:outline-none\"\n                    >\n                      {roles.map((r) => (\n                        <option\n                          className=\"text-blue-dark-900\"\n                          value={r.value}\n                          key={r.label}\n                          hidden={r.value === 'DEFAULT'}\n                        >\n                          {r.label}\n                        </option>\n                      ))}\n                    </select>\n                    <SelectArrow className=\"absolute h-2 mt-2 text-white right-4 top-4\" />\n                    <label\n                      htmlFor=\"role\"\n                      className={classNames(\n                        'absolute z-10 transition-all duration-300 ease-linear pointer-events-none left-4 bg-blue-dark-900 px-2',\n                        {\n                          '-top-3 text-green-600': role !== 'DEFAULT',\n                          'top-4 text-white': role === 'DEFAULT',\n                        },\n                      )}\n                    >\n                      Role\n                    </label>\n                  </div>\n\n                  <div className=\"flex\">\n                    <InputField\n                      id=\"firstName\"\n                      label=\"First Name\"\n                      type=\"text\"\n                      name=\"first-name\"\n                      autoComplete=\"given-name\"\n                      className=\"mr-3\"\n                      required\n                      requiredText=\"First name is required\"\n                      onChange={(e): void =>\n                        setFirstName(e.currentTarget.value)\n                      }\n                    />\n                    <InputField\n                      id=\"lastName\"\n                      label=\"Last Name\"\n                      type=\"text\"\n                      name=\"last-name\"\n                      autoComplete=\"family-name\"\n                      className=\"ml-3\"\n                      onChange={(e): void => setLastName(e.currentTarget.value)}\n                    />\n                  </div>\n\n                  <InputField\n                    id=\"email\"\n                    label=\"Email\"\n                    type=\"email\"\n                    name=\"email\"\n                    autoComplete=\"email\"\n                    required\n                    requiredText=\"Email address is required\"\n                    validate={isValidEmail}\n                    invalidText=\"Invalid email address\"\n                    onChange={(e): void => {\n                      if (isValidEmail(e.currentTarget.value)) {\n                        setEmail(e.currentTarget.value)\n                      } else {\n                        setEmail(undefined)\n                      }\n                    }}\n                  />\n\n                  <InputField\n                    id=\"message\"\n                    label=\"Message\"\n                    type=\"text\"\n                    name=\"message\"\n                    required\n                    requiredText=\"Message is required\"\n                    onChange={(e): void => setMessage(e.currentTarget.value)}\n                  />\n\n                  <Button\n                    disabled={!validForm}\n                    label=\"Submit\"\n                    className=\"mt-8 sm:hidden\"\n                  />\n                  <Button\n                    disabled={!validForm}\n                    label=\"Submit\"\n                    size=\"lg\"\n                    className=\"hidden mx-auto mt-16 sm:block\"\n                  />\n                </form>\n              </div>\n            )}\n            {submitted && (\n              <div className=\"w-full mx-auto my-20 text-center md:my-40 md:max-w-lg\">\n                <h2 className=\"text-2xl font-bold sm:text-4xl\">Thank you!</h2>\n                <h3 className=\"mt-4 text-2xl font-bold\">\n                  We will reach out shortly\n                </h3>\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </Layout>\n  )\n}\n\nexport default Contact\n","var React = require('react');\n\nfunction SelectArrow (props) {\n    return React.createElement(\"svg\",props,React.createElement(\"path\",{\"d\":\"M1 1L4 4L7 1\",\"stroke\":\"currentColor\",\"strokeWidth\":\"2\",\"strokeLinecap\":\"round\",\"strokeLinejoin\":\"round\"}));\n}\n\nSelectArrow.defaultProps = {\"viewBox\":\"0 0 8 5\",\"fill\":\"none\"};\n\nmodule.exports = SelectArrow;\n\nSelectArrow.default = SelectArrow;\n","import classNames from 'classnames'\nimport React, {\n  InputHTMLAttributes,\n  useRef,\n  useState,\n  ChangeEvent,\n} from 'react'\n\ninterface InputFieldProps extends InputHTMLAttributes<HTMLInputElement> {\n  label?: string\n  invalidText?: string\n  requiredText?: string\n  theme?: 'orange' | 'blue'\n  validate?: (e: string | undefined) => boolean\n  id: string\n}\n\nconst InputField: React.FC<InputFieldProps> = (props: InputFieldProps) => {\n  const {\n    label,\n    invalidText,\n    requiredText,\n    validate,\n    theme = 'blue',\n    className,\n    onChange,\n    ...inputProps\n  } = props\n\n  const inputRef = useRef<HTMLInputElement>(null)\n  const [isRaised, setIsRaised] = useState<boolean>(false)\n  const [error, setError] = useState<string | boolean>()\n\n  const shouldRaise = (): void => {\n    if (!inputRef.current) {\n      setIsRaised(false)\n    } else if (inputRef.current.value.length > 0) {\n      setIsRaised(true)\n    } else if (\n      document.activeElement &&\n      document.activeElement.id === inputRef.current.id\n    ) {\n      setIsRaised(true)\n    } else {\n      setIsRaised(false)\n    }\n  }\n\n  const localOnChange = (event: ChangeEvent<HTMLInputElement>): void => {\n    // Always propagate onChange\n    if (onChange) onChange(event)\n\n    // Check if we need to raise the label\n    shouldRaise()\n\n    // Check if we need to set and error for required fields\n    if (props.required && event.currentTarget.value.length === 0) {\n      if (props.requiredText) {\n        setError(props.requiredText)\n        return\n      }\n      setError(true)\n      return\n    }\n\n    // Check if this is a valid input\n    if (props.validate) {\n      if (!props.validate(event.currentTarget.value)) {\n        if (props.invalidText) {\n          setError(props.invalidText)\n          return\n        }\n        setError(true)\n        return\n      }\n    }\n\n    setError(false)\n  }\n\n  const hasErrors = !!(typeof error !== 'undefined' && error)\n\n  return (\n    <div className={classNames(className, 'relative w-full mb-6')}>\n      <input\n        onChange={localOnChange}\n        onFocus={shouldRaise}\n        onBlur={shouldRaise}\n        ref={inputRef}\n        {...inputProps}\n        className={classNames(\n          'w-full px-6 py-4 placeholder-white bg-transparent rounded border-2 appearance-none focus:outline-none',\n          {\n            'border-green-600': isRaised && !hasErrors && theme === 'blue',\n            'border-white': (!isRaised && !hasErrors) || theme === 'orange',\n            'border-orange-600': hasErrors && theme === 'blue',\n          },\n        )}\n      />\n      <label\n        htmlFor={props.id}\n        className={classNames(\n          'absolute z-10 transition-all duration-300 ease-linear pointer-events-none left-4 px-2 rounded',\n          {\n            'top-4': !isRaised && !hasErrors,\n            '-top-3': isRaised || hasErrors,\n            'text-green-600': isRaised && !hasErrors && theme === 'blue',\n            'text-orange-600': hasErrors && theme === 'blue',\n            'text-white': theme === 'orange' || (!isRaised && !hasErrors),\n            'bg-blue-dark-900': theme === 'blue',\n            'bg-orange-500': theme === 'orange',\n          },\n        )}\n      >\n        {props.label ?? props.name}{' '}\n      </label>\n      {typeof error === 'string' && (\n        <div\n          className={classNames('flex pt-1 text-sm', {\n            'text-orange-600': theme === 'blue',\n            'text-white': theme === 'orange',\n          })}\n        >\n          <div>{error}</div>\n        </div>\n      )}\n    </div>\n  )\n}\nexport default InputField\n"],"sourceRoot":""}